import { createWorkflow, createStep } from "@mastra/core/workflows";
import { z } from "zod";
import { customerIdentificationAgent } from "../../agents/sanden/customer-identification";
import { productSelectionAgent } from "../../agents/sanden/product-selection";
import { issueAnalysisAgent } from "../../agents/sanden/issue-analysis";
import { visitConfirmationAgent } from "../../agents/sanden/visit-confirmation";

// Step 1: Customer Identification
const customerIdentificationStep = createStep({
  id: "customer-identification",
  description: "Identify and verify customer information",
  inputSchema: z.object({
    userInput: z
      .string()
      .describe("Initial user input for customer identification"),
  }),
  outputSchema: z.object({
    customerData: z.object({
      company: z.string(),
      email: z.string(),
      phone: z.string(),
    }),
    userInput: z.string(),
  }),
  execute: async ({ inputData }) => {
    const result = await customerIdentificationAgent.generate([
      { role: "user", content: inputData.userInput },
    ]);

    // Extract customer data from the agent response
    const response = result.text;

    // Parse the response to extract customer information
    const company = extractCompanyFromText(response);
    const email = extractEmailFromText(response);
    const phone = extractPhoneFromText(response);

    return {
      customerData: { company, email, phone },
      userInput: inputData.userInput,
    };
  },
});

// Step 2: Product Selection
const productSelectionStep = createStep({
  id: "product-selection",
  description: "Select and verify product information",
  inputSchema: z.object({
    customerData: z.object({
      company: z.string(),
      email: z.string(),
      phone: z.string(),
    }),
    userInput: z.string(),
  }),
  outputSchema: z.object({
    customerData: z.object({
      company: z.string(),
      email: z.string(),
      phone: z.string(),
    }),
    productData: z.object({
      productId: z.string(),
      category: z.string(),
      model: z.string(),
    }),
    userInput: z.string(),
  }),
  execute: async ({ inputData }) => {
    const result = await productSelectionAgent.generate([
      { role: "user", content: inputData.userInput },
    ]);

    // Extract product data from the agent response
    const response = result.text;

    // Parse the response to extract product information
    const productId = extractProductIdFromText(response);
    const category = extractCategoryFromText(response);
    const model = extractModelFromText(response);

    return {
      customerData: inputData.customerData,
      productData: { productId, category, model },
      userInput: inputData.userInput,
    };
  },
});

// Step 3: Issue Analysis
const issueAnalysisStep = createStep({
  id: "issue-analysis",
  description: "Analyze and diagnose the repair issue",
  inputSchema: z.object({
    customerData: z.object({
      company: z.string(),
      email: z.string(),
      phone: z.string(),
    }),
    productData: z.object({
      productId: z.string(),
      category: z.string(),
      model: z.string(),
    }),
    userInput: z.string(),
  }),
  outputSchema: z.object({
    customerData: z.object({
      company: z.string(),
      email: z.string(),
      phone: z.string(),
    }),
    productData: z.object({
      productId: z.string(),
      category: z.string(),
      model: z.string(),
    }),
    issueData: z.object({
      issueSummary: z.string(),
      priority: z.string(),
      issueCategory: z.string(),
    }),
    userInput: z.string(),
  }),
  execute: async ({ inputData }) => {
    const result = await issueAnalysisAgent.generate([
      { role: "user", content: inputData.userInput },
    ]);

    // Extract issue data from the agent response
    const response = result.text;

    // Parse the response to extract issue information
    const issueSummary = extractIssueSummaryFromText(response);
    const priority = extractPriorityFromText(response);
    const issueCategory = extractIssueCategoryFromText(response);

    return {
      customerData: inputData.customerData,
      productData: inputData.productData,
      issueData: { issueSummary, priority, issueCategory },
      userInput: inputData.userInput,
    };
  },
});

// Step 4: Visit Confirmation
const visitConfirmationStep = createStep({
  id: "visit-confirmation",
  description: "Confirm visit details and schedule appointment",
  inputSchema: z.object({
    customerData: z.object({
      company: z.string(),
      email: z.string(),
      phone: z.string(),
    }),
    productData: z.object({
      productId: z.string(),
      category: z.string(),
      model: z.string(),
    }),
    issueData: z.object({
      issueSummary: z.string(),
      priority: z.string(),
      issueCategory: z.string(),
    }),
    userInput: z.string(),
  }),
  outputSchema: z.object({
    customerData: z.object({
      company: z.string(),
      email: z.string(),
      phone: z.string(),
    }),
    productData: z.object({
      productId: z.string(),
      category: z.string(),
      model: z.string(),
    }),
    issueData: z.object({
      issueSummary: z.string(),
      priority: z.string(),
      issueCategory: z.string(),
    }),
    visitData: z.object({
      visitDate: z.string(),
      visitTime: z.string(),
      duration: z.string(),
    }),
    userInput: z.string(),
  }),
  execute: async ({ inputData }) => {
    const result = await visitConfirmationAgent.generate([
      { role: "user", content: inputData.userInput },
    ]);

    // Extract visit data from the agent response
    const response = result.text;

    // Parse the response to extract visit information
    const visitDate = extractDateFromText(response);
    const visitTime = extractTimeFromText(response);
    const duration = extractDurationFromText(response);

    return {
      customerData: inputData.customerData,
      productData: inputData.productData,
      issueData: inputData.issueData,
      visitData: { visitDate, visitTime, duration },
      userInput: inputData.userInput,
    };
  },
});

// Final mapping step
const finalMappingStep = createStep({
  id: "final-mapping",
  description: "Generate appointment ID and return complete data",
  inputSchema: z.object({
    customerData: z.object({
      company: z.string(),
      email: z.string(),
      phone: z.string(),
    }),
    productData: z.object({
      productId: z.string(),
      category: z.string(),
      model: z.string(),
    }),
    issueData: z.object({
      issueSummary: z.string(),
      priority: z.string(),
      issueCategory: z.string(),
    }),
    visitData: z.object({
      visitDate: z.string(),
      visitTime: z.string(),
      duration: z.string(),
    }),
    userInput: z.string(),
  }),
  outputSchema: z.object({
    customerData: z.object({
      company: z.string(),
      email: z.string(),
      phone: z.string(),
    }),
    productData: z.object({
      productId: z.string(),
      category: z.string(),
      model: z.string(),
    }),
    issueData: z.object({
      issueSummary: z.string(),
      priority: z.string(),
      issueCategory: z.string(),
    }),
    visitData: z.object({
      visitDate: z.string(),
      visitTime: z.string(),
      duration: z.string(),
    }),
    appointmentId: z.string(),
  }),
  execute: async ({ inputData }) => {
    const appointmentId = generateAppointmentId();
    return {
      customerData: inputData.customerData,
      productData: inputData.productData,
      issueData: inputData.issueData,
      visitData: inputData.visitData,
      appointmentId,
    };
  },
});

// Helper functions for extracting data from agent responses
function extractCompanyFromText(text: string): string {
  // Extract company name from text
  const companyMatch = text.match(/会社名[：:]\s*([^\n\r]+)/);
  return companyMatch ? companyMatch[1].trim() : "Unknown Company";
}

function extractEmailFromText(text: string): string {
  // Extract email from text
  const emailMatch = text.match(/メール[：:]\s*([^\n\r]+)/);
  return emailMatch ? emailMatch[1].trim() : "unknown@example.com";
}

function extractPhoneFromText(text: string): string {
  // Extract phone from text
  const phoneMatch = text.match(/電話[：:]\s*([^\n\r]+)/);
  return phoneMatch ? phoneMatch[1].trim() : "Unknown Phone";
}

function extractProductIdFromText(text: string): string {
  // Extract product ID from text
  const productIdMatch = text.match(/製品ID[：:]\s*([^\n\r]+)/);
  return productIdMatch ? productIdMatch[1].trim() : "Unknown Product ID";
}

function extractCategoryFromText(text: string): string {
  // Extract category from text
  const categoryMatch = text.match(/カテゴリ[：:]\s*([^\n\r]+)/);
  return categoryMatch ? categoryMatch[1].trim() : "Unknown Category";
}

function extractModelFromText(text: string): string {
  // Extract model from text
  const modelMatch = text.match(/モデル[：:]\s*([^\n\r]+)/);
  return modelMatch ? modelMatch[1].trim() : "Unknown Model";
}

function extractIssueSummaryFromText(text: string): string {
  // Extract issue summary from text
  const issueMatch = text.match(/問題概要[：:]\s*([^\n\r]+)/);
  return issueMatch ? issueMatch[1].trim() : "Unknown Issue";
}

function extractPriorityFromText(text: string): string {
  // Extract priority from text
  const priorityMatch = text.match(/優先度[：:]\s*([^\n\r]+)/);
  return priorityMatch ? priorityMatch[1].trim() : "Medium";
}

function extractIssueCategoryFromText(text: string): string {
  // Extract issue category from text
  const categoryMatch = text.match(/問題カテゴリ[：:]\s*([^\n\r]+)/);
  return categoryMatch ? categoryMatch[1].trim() : "General";
}

function extractDateFromText(text: string): string {
  // Extract visit date from text
  const dateMatch = text.match(/訪問日[：:]\s*([^\n\r]+)/);
  return dateMatch ? dateMatch[1].trim() : "TBD";
}

function extractTimeFromText(text: string): string {
  // Extract visit time from text
  const timeMatch = text.match(/訪問時間[：:]\s*([^\n\r]+)/);
  return timeMatch ? timeMatch[1].trim() : "TBD";
}

function extractDurationFromText(text: string): string {
  // Extract duration from text
  const durationMatch = text.match(/所要時間[：:]\s*([^\n\r]+)/);
  return durationMatch ? durationMatch[1].trim() : "1 hour";
}

// Create the workflow with proper step chaining
export const repairIntakeWorkflow = createWorkflow({
  id: "repair-intake-workflow",
  description: "Sanden Retail Systems repair intake workflow",
  inputSchema: z.object({
    userInput: z
      .string()
      .describe("Initial user input for customer identification"),
  }),
  outputSchema: z.object({
    customerData: z.object({
      company: z.string(),
      email: z.string(),
      phone: z.string(),
    }),
    productData: z.object({
      productId: z.string(),
      category: z.string(),
      model: z.string(),
    }),
    issueData: z.object({
      issueSummary: z.string(),
      priority: z.string(),
      issueCategory: z.string(),
    }),
    visitData: z.object({
      visitDate: z.string(),
      visitTime: z.string(),
      duration: z.string(),
    }),
    appointmentId: z.string(),
  }),
})
  .then(customerIdentificationStep)
  .then(productSelectionStep)
  .then(issueAnalysisStep)
  .then(visitConfirmationStep)
  .then(finalMappingStep)
  .commit();

function generateAppointmentId(): string {
  return `APPT-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}
