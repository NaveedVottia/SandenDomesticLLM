#!/usr/bin/env node

import { readFileSync } from 'fs';
import { resolve } from 'path';

// Load environment variables
const envContent = readFileSync('server.env', 'utf-8');
const envLines = envContent.split('\n').filter(line => line.trim() && !line.startsWith('#'));
envLines.forEach(line => {
  const [key, value] = line.split('=');
  if (key && value) {
    process.env[key.trim()] = value.trim();
  }
});

// Import Zapier MCP client
const { zapierMcp } = await import('./dist/integrations/zapier-mcp.js');

class RealZapierE2ETest {
  constructor() {
    this.testResults = [];
    this.conversationLog = [];
    this.startTime = new Date();
  }

  async logStep(step, description, data = null) {
    const timestamp = new Date().toISOString();
    const logEntry = {
      timestamp,
      step,
      description,
      data,
      success: true
    };
    
    console.log(`\nüîÑ Step ${step}: ${description}`);
    this.testResults.push(logEntry);
    
    return logEntry;
  }

  async testZapierConnection() {
    try {
      await this.logStep(1, "Testing Zapier MCP Connection");
      
      await zapierMcp.ensureConnected();
      console.log('‚úÖ Zapier MCP connected successfully');
      
      const tools = Object.keys(zapierMcp.toolset || {});
      console.log(`‚úÖ Available tools: ${tools.length}`);
      console.log('üìã Tools:', tools.slice(0, 5).join(', '), tools.length > 5 ? '...' : '');
      
      return true;
    } catch (error) {
      console.error('‚ùå Zapier MCP connection failed:', error.message);
      this.testResults[this.testResults.length - 1].success = false;
      this.testResults[this.testResults.length - 1].error = error.message;
      return false;
    }
  }

  async testCustomerLookup() {
    try {
      await this.logStep(2, "Testing Customer Data Lookup");
      
      // Look up customer data for „Çª„Éñ„É≥„Ç§„É¨„Éñ„É≥ ÁßãËëâÂéüÂ∫ó
      const customerData = await zapierMcp.callTool('google_sheets_lookup_spreadsheet_rows_advanced', {
        instructions: 'Find customer data for „Çª„Éñ„É≥„Ç§„É¨„Éñ„É≥ ÁßãËëâÂéüÂ∫ó',
        worksheet: 'Customers',
        search_criteria: {
          '‰ºöÁ§æÂêç': '„Çª„Éñ„É≥„Ç§„É¨„Éñ„É≥ ÁßãËëâÂéüÂ∫ó'
        }
      });
      
      console.log('‚úÖ Customer lookup successful');
      console.log('üìä Customer data:', customerData ? 'Found' : 'Not found');
      
      this.conversationLog.push({
        role: 'system',
        content: `Customer lookup result: ${JSON.stringify(customerData)}`
      });
      
      return customerData;
    } catch (error) {
      console.error('‚ùå Customer lookup failed:', error.message);
      this.testResults[this.testResults.length - 1].success = false;
      this.testResults[this.testResults.length - 1].error = error.message;
      return null;
    }
  }

  async testRepairHistoryLookup() {
    try {
      await this.logStep(3, "Testing Repair History Lookup");
      
      // Look up repair history for CUST004 („Çª„Éñ„É≥„Ç§„É¨„Éñ„É≥ ÁßãËëâÂéüÂ∫ó)
      const repairHistory = await zapierMcp.callTool('google_sheets_lookup_spreadsheet_rows_advanced', {
        instructions: 'Find repair history for customer CUST004',
        worksheet: 'repairs',
        search_criteria: {
          'È°ßÂÆ¢ID': 'CUST004'
        }
      });
      
      console.log('‚úÖ Repair history lookup successful');
      console.log('üìä Repair records found:', repairHistory ? 'Yes' : 'No');
      
      this.conversationLog.push({
        role: 'system',
        content: `Repair history result: ${JSON.stringify(repairHistory)}`
      });
      
      return repairHistory;
    } catch (error) {
      console.error('‚ùå Repair history lookup failed:', error.message);
      this.testResults[this.testResults.length - 1].success = false;
      this.testResults[this.testResults.length - 1].error = error.message;
      return null;
    }
  }

  async testNewRepairBooking() {
    try {
      await this.logStep(4, "Testing New Repair Booking Creation");
      
      // Create a new repair booking
      const newRepair = await zapierMcp.callTool('google_sheets_create_spreadsheet_row', {
        instructions: 'Create a new repair booking for September 18th, 6pm visit',
        worksheet: 'repairs',
        row_data: {
          '‰øÆÁêÜID': `REP${Date.now()}`,
          'Êó•ÊôÇ': '2025-09-18 18:00',
          'Ë£ΩÂìÅID': 'PROD004',
          'È°ßÂÆ¢ID': 'CUST004',
          'ÂïèÈ°åÂÜÖÂÆπ': 'Ëá™ÂãïË≤©Â£≤Ê©ü„ÅÆÊïÖÈöú„ÄÅ„É°„É≥„ÉÜ„Éä„É≥„Çπ„ÅåÂøÖË¶Å',
          '„Çπ„ÉÜ„Éº„Çø„Çπ': 'Êú™ÂØæÂøú',
          'Ë®™ÂïèË¶ÅÂê¶': 'Yes',
          'ÂÑ™ÂÖàÂ∫¶': '‰∏≠',
          'ÂØæÂøúËÄÖ': 'AI'
        }
      });
      
      console.log('‚úÖ New repair booking created');
      console.log('üìä Repair ID:', newRepair?.‰øÆÁêÜID || 'Unknown');
      
      this.conversationLog.push({
        role: 'system',
        content: `New repair booking created: ${JSON.stringify(newRepair)}`
      });
      
      return newRepair;
    } catch (error) {
      console.error('‚ùå Repair booking creation failed:', error.message);
      this.testResults[this.testResults.length - 1].success = false;
      this.testResults[this.testResults.length - 1].error = error.message;
      return null;
    }
  }

  async testLogEntryCreation() {
    try {
      await this.logStep(5, "Testing Log Entry Creation");
      
      // Create a log entry for the repair booking
      const logEntry = await zapierMcp.callTool('google_sheets_create_spreadsheet_row', {
        instructions: 'Create a log entry for the repair booking confirmation',
        worksheet: 'Logs',
        row_data: {
          'Timestamp': new Date().toISOString(),
          'Repair ID': `REP${Date.now()}`,
          'Status': 'Booking Confirmed',
          'Customer ID': 'CUST004',
          'Product ID': 'PROD004',
          'ÊãÖÂΩìËÄÖ (Handler)': 'AI Assistant',
          'Issue': 'Ëá™ÂãïË≤©Â£≤Ê©ü„ÅÆÊïÖÈöú„ÄÅ„É°„É≥„ÉÜ„Éä„É≥„Çπ„ÅåÂøÖË¶Å',
          'Source': 'E2E Test',
          'Raw': JSON.stringify({
            customer: '„Çª„Éñ„É≥„Ç§„É¨„Éñ„É≥ ÁßãËëâÂéüÂ∫ó',
            email: 'support@7aki.jp',
            phone: '03-3322-4455',
            booking_date: '2025-09-18 18:00',
            issue: 'Ëá™ÂãïË≤©Â£≤Ê©ü„ÅÆÊïÖÈöú„ÄÅ„É°„É≥„ÉÜ„Éä„É≥„Çπ„ÅåÂøÖË¶Å'
          })
        }
      });
      
      console.log('‚úÖ Log entry created');
      console.log('üìä Log entry ID:', logEntry?.Timestamp || 'Unknown');
      
      this.conversationLog.push({
        role: 'system',
        content: `Log entry created: ${JSON.stringify(logEntry)}`
      });
      
      return logEntry;
    } catch (error) {
      console.error('‚ùå Log entry creation failed:', error.message);
      this.testResults[this.testResults.length - 1].success = false;
      this.testResults[this.testResults.length - 1].error = error.message;
      return null;
    }
  }

  async runFullE2ETest() {
    console.log('üöÄ Starting Real Zapier MCP E2E Test');
    console.log('=' .repeat(60));
    
    const results = {
      zapierConnection: await this.testZapierConnection(),
      customerLookup: await this.testCustomerLookup(),
      repairHistory: await this.testRepairHistoryLookup(),
      newBooking: await this.testNewRepairBooking(),
      logEntry: await this.testLogEntryCreation()
    };
    
    const endTime = new Date();
    const totalTime = (endTime - this.startTime) / 1000;
    
    console.log('\n' + '='.repeat(60));
    console.log('üìä E2E Test Results Summary');
    console.log('='.repeat(60));
    
    const successCount = Object.values(results).filter(Boolean).length;
    const totalSteps = Object.keys(results).length;
    
    console.log(`‚úÖ Successful steps: ${successCount}/${totalSteps}`);
    console.log(`‚è±Ô∏è  Total time: ${totalTime.toFixed(2)} seconds`);
    console.log(`üìã Test results:`);
    
    Object.entries(results).forEach(([key, success]) => {
      console.log(`   ${success ? '‚úÖ' : '‚ùå'} ${key}: ${success ? 'PASS' : 'FAIL'}`);
    });
    
    // Save detailed results
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const resultsFile = `real-zapier-e2e-results-${timestamp}.json`;
    const logsFile = `real-zapier-conversation-logs-${timestamp}.json`;
    
    await this.saveResults(resultsFile, logsFile);
    
    console.log(`\nüíæ Results saved to: ${resultsFile}`);
    console.log(`üíæ Conversation logs saved to: ${logsFile}`);
    
    return {
      success: successCount === totalSteps,
      results,
      totalTime,
      files: { resultsFile, logsFile }
    };
  }

  async saveResults(resultsFile, logsFile) {
    const fs = await import('fs');
    
    const resultsData = {
      timestamp: new Date().toISOString(),
      testResults: this.testResults,
      summary: {
        totalSteps: this.testResults.length,
        successfulSteps: this.testResults.filter(r => r.success).length,
        failedSteps: this.testResults.filter(r => !r.success).length,
        totalTime: (new Date() - this.startTime) / 1000
      }
    };
    
    const logsData = {
      timestamp: new Date().toISOString(),
      conversationLog: this.conversationLog,
      testResults: this.testResults
    };
    
    fs.writeFileSync(resultsFile, JSON.stringify(resultsData, null, 2));
    fs.writeFileSync(logsFile, JSON.stringify(logsData, null, 2));
  }
}

// Run the test
const test = new RealZapierE2ETest();
const results = await test.runFullE2ETest();

if (results.success) {
  console.log('\nüéâ All tests passed! Zapier MCP integration is working correctly.');
  process.exit(0);
} else {
  console.log('\n‚ö†Ô∏è  Some tests failed. Check the results for details.');
  process.exit(1);
}
