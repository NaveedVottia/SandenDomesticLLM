#!/usr/bin/env node

// Simple E2E Test Script for Model Comparison
// This script demonstrates the complete flow for testing different models

console.log('üöÄ E2E Model Comparison Test Script');
console.log('=====================================');

console.log('\nüìã Test Scenario:');
console.log('1. User says hello');
console.log('2. Enters login details: „Çª„Éñ„É≥„Ç§„É¨„Éñ„É≥ ÁßãËëâÂéüÂ∫ó, support@7aki.jp, 03-3322-4455');
console.log('3. Requests repair history');
console.log('4. Confirms data accuracy against database.txt');
console.log('5. Makes booking for September 18th, 6pm');
console.log('6. Confirms booking');
console.log('7. Verifies LOGS sheet entry');

console.log('\nü§ñ Models to Test:');
console.log('- nova_micro (Nova Micro - cheapest)');
console.log('- nova_pro (Nova Pro - higher quality)');
console.log('- claude_sonnet (Claude 3.5 Sonnet v2 - premium)');

console.log('\nüìä Expected Database Data for CUST004/PROD004:');
console.log('REP102: 2025-08-03, „Ç≥„Ç§„É≥„ÅåË©∞„Åæ„Çã, Êú™ÂØæÂøú');
console.log('REP104: 2025-08-05, „Ç≥„Ç§„É≥„ÅåË©∞„Åæ„Çã, Ëß£Ê±∫Ê∏à„Åø');
console.log('REP108: 2025-08-09, ÁîªÈù¢„ÅåË°®Á§∫„Åï„Çå„Å™„ÅÑ, ÂØæÂøú‰∏≠');
console.log('REP116: 2025-08-17, Ê∞¥Êºè„Çå„Åå„ÅÇ„Çã, Ëß£Ê±∫Ê∏à„Åø');
console.log('REP118: 2025-08-19, ÂÜ∑Âç¥„ÅåÊ©üËÉΩ„Åó„Å™„ÅÑ, Êú™ÂØæÂøú');

console.log('\nüîß Manual Test Commands:');
console.log('Run these commands in sequence for each model:');

const models = ['nova_micro', 'nova_pro', 'claude_sonnet'];
const testMessages = [
  '„Åì„Çì„Å´„Å°„ÅØ„ÄÅ‰øÆÁêÜ„ÅÆ„ÅîÁõ∏Ë´á„Çí„Åó„Åü„ÅÑ„ÅÆ„Åß„Åô„Åå„ÄÇ',
  '‰ºöÁ§æÂêç: „Çª„Éñ„É≥„Ç§„É¨„Éñ„É≥ ÁßãËëâÂéüÂ∫ó\n„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ: support@7aki.jp\nÈõªË©±Áï™Âè∑: 03-3322-4455',
  '‰øÆÁêÜÂ±•Ê≠¥„ÇíÁ¢∫Ë™ç„Åó„Åü„ÅÑ„ÅÆ„Åß„Åô„Åå„ÄÅÈÅéÂéª„ÅÆ‰øÆÁêÜË®òÈå≤„ÇíÊïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
  '9Êúà18Êó•„ÅÆÂçàÂæå6ÊôÇ„Å´Ë®™Âïè‰øÆÁêÜ„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô„ÄÇËá™Ë≤©Ê©ü„ÅåÊïÖÈöú„Åó„Å¶„ÅÑ„Å¶„É°„É≥„ÉÜ„Éä„É≥„Çπ„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ',
  '‰∫àÁ¥Ñ„ÇíÁ¢∫ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
  '„É≠„Ç∞„Ç∑„Éº„Éà„Å´Ë®òÈå≤„ÅåËøΩÂä†„Åï„Çå„Åü„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
];

models.forEach((model, modelIndex) => {
  console.log(`\n--- Testing ${model} ---`);
  testMessages.forEach((message, msgIndex) => {
    console.log(`curl -X POST http://localhost:3000/api/test/stream \\`);
    console.log(`  -H "Content-Type: application/json" \\`);
    console.log(`  -d '{"messages":[{"role":"user","content":"${message}"}],"model":"${model}"}' \\`);
    console.log(`  --max-time 30`);
    console.log('');
  });
});

console.log('\nüìà Evaluation Criteria:');
console.log('1. Response Time: How quickly each model responds');
console.log('2. Data Accuracy: Correct repair history retrieval');
console.log('3. Japanese Language Quality: Natural conversation flow');
console.log('4. Booking Accuracy: Proper appointment scheduling');
console.log('5. Error Handling: Graceful handling of edge cases');

console.log('\nüîç Zapier Integration Points:');
console.log('- After login details: Wait 5 seconds for customer lookup');
console.log('- After repair request: Wait 5 seconds for database query');
console.log('- After booking request: Wait 5 seconds for calendar integration');
console.log('- After confirmation: Wait 5 seconds for LOGS sheet update');

console.log('\nüìù Expected Results:');
console.log('- All models should retrieve correct repair history for CUST004');
console.log('- All models should handle Japanese text properly');
console.log('- All models should create proper booking entries');
console.log('- All models should confirm LOGS sheet updates');

console.log('\n‚úÖ Success Criteria:');
console.log('- Complete conversation flow without errors');
console.log('- Accurate data retrieval from database.txt');
console.log('- Proper booking confirmation');
console.log('- LOGS sheet entry verification');

console.log('\nüöÄ Ready to start testing!');
console.log('Run the curl commands above for each model to compare performance.');
